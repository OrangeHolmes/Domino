import java.util.Random; // x aquello que se use , si no se borra
public class EnfrentamientoSimple{
   
 
    private Dealer dealer;
    private Interfaz interfaz;
    private Ficha ficha, fichaJ1, fichaJ2;
    private Ficha[] fichasTotales;
    private Ficha fichasJugador1[], fichasJugador2[]; //15 el maximo numeroo de fichas que se puede tener
    private Jugador jugador1, jugador2;
    private Dummy usuario1, usuario2;
    private Agresivo agresivo1, agresivo2;
    private Pasivo pasivo1, pasivo2;
    private Bateador bateador1, bateador2;
    private int cantidadDeFichas = 28;
    private int puntajeJugador1, puntajeJugador2, cantidadFichasInicio, aleatorio, posicionFichaJ1, posicionFichaJ2;
    private int ladoD1, ladoI1, ladoD2, ladoI2, ultimaPuestaI, ultimaPuestaD;
    private String tipoJugador1, tipoJugador2;
    private Mesa tablero;
    
    
    public EnfrentamientoSimple(){
        this.dealer = new Dealer();
        this.ficha = new Ficha();
        this.interfaz = new Interfaz();
        this.jugador1= new Jugador(tipoJugador1, puntajeJugador1, fichasJugador1);
        this.jugador2= new Jugador(tipoJugador2, puntajeJugador2, fichasJugador2);
        this.fichasTotales = new Ficha[28];
         for(int i = 0,j= 7,l= 13, m=18, n=22 ; i < 7; ++i, ++j,++l,++m, ++n){
             if( i<=6){
             fichasTotales [i] = new Ficha (0,i,false);}
             if(j<=12){
             fichasTotales [j] = new Ficha (1,i+1,false);}
             if(l<=17){
             fichasTotales [l] = new Ficha (2,i+2,false);}
             if(m<=21){ 
             fichasTotales [m] = new Ficha (3,i+3,false);}
             if(n<=24){
             fichasTotales [n] = new Ficha (4,i+4,false);}
         }
        fichasTotales [25] = new Ficha (5,5,false);
        fichasTotales [26] = new Ficha (5,6,false);
        fichasTotales [27] = new Ficha (6,6,false);
        
        //this.fichasJugador1 = new Ficha[15];
        //this.fichasJugador2 = new Ficha[15];
        //this.modeloAgresivo = new Jugador ( tipoJugador1, puntajeJugador1, fichasJugador1);
        //this.modeloBateador = new Jugador ( tipoJugador2, puntajeJugador2, fichasJugador2);
        //this.modeloEstratega = new Jugador ( tipoJugador3, puntajeJugador3, fichasJugador3); 
        
    }
    
    public boolean turnoInicial(){
      boolean quienVa=false;
     while( quienVa == false) { 
      this.ficha.asignarFichas( this.fichasTotales, this.fichasJugador1);
      this.ficha.asignarFichas( this.fichasTotales, this.fichasJugador2);
          boolean turnoInicial = false;
      int contadorFicha = 0;
      int contadorLado = 0;
     
      
       while ( turnoInicial == false){
        
         for(contadorFicha=0; contadorFicha < 6; contadorFicha++){
         contadorLado = 6;
         ladoI1= this.ficha.getFicha(this.fichasJugador1,contadorFicha).getLadoIzquierdo();
         ladoD1= this.ficha.getFicha(this.fichasJugador1,contadorFicha).getLadoDerecho();
         ladoI2= this.ficha.getFicha(this.fichasJugador2,contadorFicha).getLadoIzquierdo();
         ladoD2= this.ficha.getFicha(this.fichasJugador2,contadorFicha).getLadoDerecho();
         if( ladoI1 == contadorLado && ladoD1 == contadorLado){
         turnoInicial = true;
         this.tablero += " "+ ladoI1 + "|" + ladoD1;
         }
         else if (ladoI2 == contadorLado && ladoD2 == contadorLado){
          turnoInicial = true;
          quienVa = true;
          this.tablero += " "+ ladoI2 + "|" + ladoD2;
          }
        
        }    
          
         --contadorLado;
         ++contadorFicha;
         if( contadorFicha == 7){
          turnoInicial = true; }
        }
        if(contadorFicha == 7){
         quienVa=false;}
        else {
        quienVa=true;
        }
     
     } 
     return quienVa;
   }
   
   
    public void usuario_VS_Usuario(){
      
      
      this.usuario1 = new Dummy(jugador1); 
      this.usuario2 = new Dummy(jugador2);
      this.quienVa = false;
      this.turnoInicial= false; 
      ladoI1=0;
      ladoD1=0;
      ladoI2=0;
      ladoD2=0;
      fin = false;
        while(fin){
      quienVa = turnoInicial();
       while( noHabemusFichas == false){
       if(quienVa == false){
         System.out.println("Turno del Jugador 1");
         usuario1.horaDelDuelo(fichasJugador1);
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
         if( noHabemusFichas == true){
          puntajeJugador1=ficha.getValor(fichasJugador2);
        }  
         quienVa=true;}
        if(quienVa == true){
            System.out.println("Turno del Jugador 2");
            noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
            usuario2.horaDelDuelo(fichasJugador2);
            if( noHabemusFichas == true){
             puntajeJugador2=ficha.getValor(fichasJugador1);
            }
            quienVa = false;  
        }  
        }
      if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
       fin = true;
      }
    }
  } 
  
 }
  
  // public void compu_Vs_Compu(){
    
 
  // }
    
   // public void usuario_VS_Compu(){
    
   
       
    
   // } 
    
    
    
