
public class Simple{
   
 
    private Dealer dealer;
    private Interfaz interfaz;
    private Ficha ficha, fichaJ1, fichaJ2;
    private Ficha[] fichasTotales;
    private Ficha fichasJugador1[], fichasJugador2[]; //15 el maximo numeroo de fichas que se puede tener
    private Jugador jugador1, jugador2;
    private Dummy usuario1, usuario2;
    private Agresivo agresivo1, agresivo2;
    private Pasivo pasivo1, pasivo2;
    private Bateador bateador1, bateador2;
    private int cantidadDeFichas = 28;
    private int puntajeJugador1, puntajeJugador2, cantidadFichasInicio, aleatorio, posicionFichaJ1, posicionFichaJ2;
    private int ladoD1, ladoI1, ladoD2, ladoI2, ultimaPuestaI, ultimaPuestaD,cuales; // int cuales me dice a partir de donde saco fichas de la pila para repartir.
    // ultimaPuestaI me dice que fue la ultima ficha puesta en el lado izquierdo de la mesa, de forma analoga pasa con ultimaPuestaD
    private boolean quienVa, fin, noHabemusFichas, turnoInicial;
    // El boolean quienVa me ayuda a alternar el turno entre el jugador 1 y el jugador 2
    private String mesa ;
    private Mesa tablero;
    
    
    public Simple(){
        this.mesa = " ";
        this.tablero = new Mesa(mesa);
        this.dealer = new Dealer();
        this.ficha = new Ficha();
        this.interfaz = new Interfaz();
        fichasJugador1 = new Ficha[15];
        fichasJugador2 = new Ficha[15];
        this.jugador1= new Jugador( puntajeJugador1, fichasJugador1);
        this.jugador2= new Jugador( puntajeJugador2, fichasJugador2);
        this.fichasTotales = new Ficha[28];
         for(int i = 0,j= 7,l= 13, m=18, n=22 ; i < 7; ++i, ++j,++l,++m, ++n){
             if( i<=6){
             fichasTotales [i] = new Ficha (0,i);}
             if(j<=12){
             fichasTotales [j] = new Ficha (1,i+1);}
             if(l<=17){
             fichasTotales [l] = new Ficha (2,i+2);}
             if(m<=21){ 
             fichasTotales [m] = new Ficha (3,i+3);}
             if(n<=24){
             fichasTotales [n] = new Ficha (4,i+4);}
         }
        fichasTotales [25] = new Ficha (5,5);
        fichasTotales [26] = new Ficha (5,6);
        fichasTotales [27] = new Ficha (6,6);
        
        //this.fichasJugador1 = new Ficha[15];
        //this.fichasJugador2 = new Ficha[15];
        //this.modeloAgresivo = new Jugador ( tipoJugador1, puntajeJugador1, fichasJugador1);
        //this.modeloBateador = new Jugador ( tipoJugador2, puntajeJugador2, fichasJugador2);
        //this.modeloEstratega = new Jugador ( tipoJugador3, puntajeJugador3, fichasJugador3); 
        
    }
    
    private boolean turnoInicial(){ // Este metodo me determina que jugador va de primero, y coloca esa primera ficha.
      boolean quienVa=false;
      fichasTotales = ficha.revolverFichas(fichasTotales);
     while( quienVa == false) { 
      cuales = 0;
      this.dealer.repartir( this.fichasTotales, this.fichasJugador1,cuales);
      cuales = 7;
      this.dealer.repartir( this.fichasTotales, this.fichasJugador2,cuales);
      boolean turnoInicial = false; // si al finalizar el metodo turnoInicial es falso empieza el primer Jugador en caso contrario el segundo
      int contadorFicha = 0;
      int contadorLado = 0;
     
      
       while ( turnoInicial == false){
        
         for(contadorFicha=0; contadorFicha < 6; contadorFicha++){
         contadorLado = 6;
         ladoI1= this.ficha.getFicha(this.fichasJugador1,contadorFicha).getLadoIzquierdo();
         ladoD1= this.ficha.getFicha(this.fichasJugador1,contadorFicha).getLadoDerecho();
         ladoI2= this.ficha.getFicha(this.fichasJugador2,contadorFicha).getLadoIzquierdo();
         ladoD2= this.ficha.getFicha(this.fichasJugador2,contadorFicha).getLadoDerecho();
         if( ladoI1 == contadorLado && ladoD1 == contadorLado){
         turnoInicial = true;
         System.out.println( " "+ ladoI1 + "|" + ladoD1);
         this.ultimaPuestaI = contadorLado;
         this.ultimaPuestaD= contadorLado;
         this.tablero.colocarFicha("d",ultimaPuestaI, ultimaPuestaD);
         }
         else if (ladoI2 == contadorLado && ladoD2 == contadorLado){
          turnoInicial = true;
          quienVa = true;
         this.ultimaPuestaI = contadorLado;
         this.ultimaPuestaD= contadorLado;
         this.tablero.colocarFicha("d",ultimaPuestaI, ultimaPuestaD);
          }
        
        }    
          
         --contadorLado;
         ++contadorFicha;
         if( contadorFicha == 7){
          turnoInicial = true; }
        }
        if(contadorFicha == 7){
         quienVa=false;}
        else {
        quienVa=true;
        }
     
     } 
     return quienVa;
   }
   
   
    public void usuario_VS_Usuario(){
      
      
      this.usuario1 = new Dummy(jugador1); 
      this.usuario2 = new Dummy(jugador2);
      this.quienVa = false;
      this.turnoInicial= false; 
      ladoI1=0;
      ladoD1=0;
      ladoI2=0;
      ladoD2=0;
      fin = false;
        while(fin){
      quienVa = turnoInicial();
       while( noHabemusFichas == false){
       if(quienVa == false){
         System.out.println("Turno del Jugador 1");
         usuario1.horaDelDuelo(fichasJugador1, tablero);
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
         if( noHabemusFichas == true){
          //Si un jugador queda sin fichas noHabemusFichas se vuelve verdadero y me saca de un ciclo.
          //Y ademÃ¡s le suma al jugador que se queda sin fichas los puntos del jugador que si tiene fichas(el valor de las fichas).
          puntajeJugador1=ficha.getValor(fichasJugador2);
        }  
         quienVa=true;}
        if(quienVa == true){
            System.out.println("Turno del Jugador 2");
            noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
            usuario2.horaDelDuelo(fichasJugador2, this.tablero);
            if( noHabemusFichas == true){
             puntajeJugador2=ficha.getValor(fichasJugador1);
            }
            quienVa = false;  
        }  
        }
      if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
       fin = true;
      }
    }
  }
   public void compu_Vs_Compu(){
    int tipoJuegoEscogido = interfaz.escogerCompuCompu();
    this.quienVa = false;
      this.turnoInicial= false; 
      ladoI1=0;
      ladoD1=0;
      ladoI2=0;
      ladoD2=0;
      fin = false;
        
      switch(tipoJuegoEscogido){
        case 1:
         this.agresivo1 = new Agresivo(jugador1);
         
         this.pasivo2 = new Pasivo(jugador2);
         
         while(fin){
        quienVa = turnoInicial();
        agresivo1.ordenar(fichasJugador1); pasivo2.ordenar2(fichasJugador2);
        while( noHabemusFichas == false){
         if(quienVa == false){
         System.out.println("Turno del Jugador 1");
         //agresivo1.queEsLaVaraPapi(fichasJugador1);
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
         if( noHabemusFichas == true){
          puntajeJugador1=ficha.getValor(fichasJugador2);
         }  
         quienVa=true;
        }
        if(quienVa == true){
         System.out.println("Turno del Jugador 2");
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
         //pasivo2.diayDemosle(fichasJugador2,,,fichaJ2);
         if( noHabemusFichas == true){
          puntajeJugador2=ficha.getValor(fichasJugador1);
          }
            quienVa = false;  
        }  
        }
      if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
       fin = true;
      }
     } break;
        case 2:
         this.agresivo1 = new Agresivo(jugador1); 
         this.bateador2 = new Bateador(jugador2);
          while(fin){
        quienVa = turnoInicial();
        agresivo1.ordenar(fichasJugador1);
        while( noHabemusFichas == false){
         if(quienVa == false){
         System.out.println("Turno del Jugador 1");
         //agresivo1.queEsLaVaraPapi(fichasJugador1);
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
         if( noHabemusFichas == true){
          puntajeJugador1=ficha.getValor(fichasJugador2);
         }  
         quienVa=true;
        }
        if(quienVa == true){
         System.out.println("Turno del Jugador 2");
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
         //bateador.diayDemosle(fichasJugador2,,,fichaJ2);
         if( noHabemusFichas == true){
          puntajeJugador2=ficha.getValor(fichasJugador1);
          }
            quienVa = false;  
        }  
        }
        if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
          fin = true;   } 
       }break;
        case 3:
         this.agresivo1 = new Agresivo(jugador1); 
         this.agresivo2 = new Agresivo(jugador2);
         while(fin){
          quienVa = turnoInicial();
          agresivo1.ordenar(fichasJugador1); agresivo2.ordenar(fichasJugador2);
          while( noHabemusFichas == false){
           if(quienVa == false){
          System.out.println("Turno del Jugador 1");
          //agresivo1.queEsLaVaraPapi(fichasJugador1);
          noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
          if( noHabemusFichas == true){
          puntajeJugador1=ficha.getValor(fichasJugador2);
         }  
         quienVa=true;
        }
        if(quienVa == true){
         System.out.println("Turno del Jugador 2");
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
         //pasivo2.diayDemosle(fichasJugador2,,,fichaJ2);
         if( noHabemusFichas == true){
          puntajeJugador2=ficha.getValor(fichasJugador1);
          }
            quienVa = false;  
        }  
        }
       if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
        fin = true; }}
       break;
        case 4:
            this.pasivo1 = new Pasivo(jugador1); 
            this.bateador2 = new Bateador(jugador2);
            break;
        case 5:
            this.pasivo1 = new Pasivo(jugador1); 
            this.pasivo2 = new Pasivo(jugador2);
            break;
        case 6:
            this.bateador1 = new Bateador(jugador1); 
            this.bateador2 = new Bateador(jugador2);
            break;
    }
      
 
  }
   
   public void usuario_VS_Compu(){
    int tipoJuegoEscogido = interfaz.escogerJugadorCompu(); 
    this.quienVa = false;
    this.turnoInicial= false; 
    ladoI1=0;
    ladoD1=0;
    ladoI2=0;
    ladoD2=0;
    fin = false;
    switch(tipoJuegoEscogido){
     case 1:
     this.usuario1 = new Dummy(jugador1);
     this.agresivo1 = new Agresivo(jugador2);
     agresivo1.ordenar(fichasJugador2);
      while(fin){
       quienVa = turnoInicial();
       while( noHabemusFichas == false){
        if(quienVa == false){
         System.out.println("Turno del Jugador 1");
         usuario1.horaDelDuelo(fichasJugador1, this.tablero);
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
         if( noHabemusFichas == true){
          puntajeJugador1=ficha.getValor(fichasJugador2);
         }  
         quienVa=true;
        }
       if(quienVa == true){
            System.out.println("Turno del Jugador 2");
            noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
            //agresivo1.queEsLaVaraPapi(fichasJugador2,,,fichaJ2);
            if( noHabemusFichas == true){
             puntajeJugador2=ficha.getValor(fichasJugador1);
            }
            quienVa = false;  
        }  
        }
      if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
       fin = true;
      }
    } break;
     case 2:
     this.usuario1 = new Dummy(jugador1);
     this.pasivo1 = new Pasivo(jugador2);
     pasivo1.ordenar2(fichasJugador2);
      while(fin){
       quienVa = turnoInicial();
       while( noHabemusFichas == false){
        if(quienVa == false){
         System.out.println("Turno del Jugador 1");
         usuario1.horaDelDuelo(fichasJugador1, this.tablero);
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
         if( noHabemusFichas == true){
          puntajeJugador1=ficha.getValor(fichasJugador2);
         }  
         quienVa=true;
        }
       if(quienVa == true){
            System.out.println("Turno del Jugador 2");
            noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
            //agresivo1.diayDemosle(fichasJugador2,,,fichaJ2);
            if( noHabemusFichas == true){
             puntajeJugador2=ficha.getValor(fichasJugador1);
            }
            quienVa = false;  
        }  
        }
      if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
       fin = true;
      }
    } break;
     case 3:
     this.usuario1 = new Dummy(jugador1);
     this.bateador1 = new Bateador(jugador2);
      while(fin){
       quienVa = turnoInicial();
       while( noHabemusFichas == false){
        if(quienVa == false){
         System.out.println("Turno del Jugador 1");
         usuario1.horaDelDuelo(fichasJugador1, this.tablero);
         noHabemusFichas=this.ficha.noHayFichas(fichasJugador1);
         if( noHabemusFichas == true){
          puntajeJugador1=ficha.getValor(fichasJugador2);
         }  
         quienVa=true;
        }
       if(quienVa == true){
            System.out.println("Turno del Jugador 2");
            noHabemusFichas=this.ficha.noHayFichas(fichasJugador2);
            //bateador1.esHoraDelDuelo(fichasJugador2,,,fichaJ2);
            if( noHabemusFichas == true){
             puntajeJugador2=ficha.getValor(fichasJugador1);
            }
            quienVa = false;  
        }  
        }
      if(this.puntajeJugador1 ==100 || puntajeJugador2 ==100){
       fin = true;
      }
     } break;
        }
  
     
      
  } 
 }
